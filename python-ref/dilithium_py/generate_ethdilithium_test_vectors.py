from .dilithium.default_parameters import Dilithium2 as D
from .keccak_prng.keccak_prng_wrapper import Keccak256PRNG

# An example of ETHDilithium.
msg = b"We are ZKNox."

# pk, sk = D.keygen(_xof=Keccak256PRNG, _xof2=Keccak256PRNG)
# print(pk.hex())
# print(sk.hex())

pk = bytes.fromhex("916de53ccbccc8b350fc29e7d0f1cc49b464a6b2d6214a97787abc4280ef5c35f8fa6bf0876ba26ea3993c15431b64b8437eaea5a41554fed4ef66e6a5a71952bcb77827c9c47d7009d36588dad834a910305de7a9ad62e82d0f14978231274c0cc6106f4215b1d38dcb9f698898b82942970174ee441551cc9687e4dfbd2d7d41422945e9bc76d5f8ae1b31f035c68c53baeab9d1c0afb0da5802c3783ba05be3a50a2ae39115314b419e6988993d2c655055ef79b913439bb6cd52642c03a44ca47206fb8de403888c473f5ec31d631aeb7a74e74fc68496fd777f90f97362aa9b394e7f57dccae64cc14e622883909119f76deacd0e5b9a2cf9bba340af835c3df30088b9efd776a975eef7f5e52fd695d1f363059c945b2589dc3ab51dedbdf6290b143653ffa9c43d6efb92cd698a07fe654d671f1369d9203ea8fe05945bba0909912b16e3ed815ac99dba342fe81489ec0c1985b2cbbc61c12300f3aba4c69f8cd6cde8a0d47d5bfeb02e0a49e8819c3ecc17e8b84b7d726091373da5cf4c886492186efb11603a2185e16c6efcc603b769545c47ac6b257b0bbe4faa90f5f60c471ad8ec5b509431e333c923518a1f49fcdb5e039a7eb3e1dab3ffcb06eccbcf0820f23d6094e01264d7d7bdc546537f1b822a4eed8f4d0e58baaad564a24ea5ea7e8492568c288446a490e578e8da4b659e864358077fcef214e04230fd3ae6b2db63ce2fde0e0f9e9a793305b4c2d7ebfb94df81c713b21e1006f384d6500052ba0ee234d6476d232f276730017c98f8ce2337365cf01b98c22c84e6a102ea9cf45eb54ebc32062b416681b89c675fff85e46da885f6517be1ce79df513bc9dae26cb621244f5b7e692c164bdcfcd9fd5d585fef583df4e673d356994086c7552a777c14e15c018bc229c945aa354f20a3e610ecd7da77dd30f8b95ad1c7ed11be17c8f7e78986540e13cef1db770b94e98009b0f5202f8c4e8f3addf12133119af938c3fbd9d8b66a37082a170189e8fa6f2e96f9f7d0e8a66bbfa71fdae7a34e5f4ee62dd3d94844a502626fc42013315b5bdba0a8438bd0c3dcf085b4095c22a0eaa8ac2237c79edbc0fe0fec1affac25605773a9f4d6d73fff31b0c85bb8b47375b81a3ee5628fef2f8b20c816f6406582f4abb28f448d8b861887eadadb785c6ed18ca1bb26bfb136dde298910cca725e10459bd829c09d03550a537daa820315de375e93d2e661e44e1adebec053cf59b1b7c091e7863aa43c4865dbc60c024ccf520b41c46a11eed06149bd01e40830a78b5d107744549af93e98cd8cae1effa9a0c1ebe5c89e997816658c5eabe101977666641203b01c28dbcb9d4fcc360bae1580f3e4b150d8d4faca0a85067bc1765e336662fa2e94eb2cf6b33dc636dda0ede467da01ea06d7ebf70f947798bda056df5a35ccfa50eccf84a244d13ca511eb363a6049ddfdf522022d641ef1e155f19ce72ed8cf5537b352e3c741bd21d6d3da35c337c94b453961e1ecb8f079797bf6f2ffe9dea96f9b02683a00a1cd0171e98139b6a932d91f5c44d80b186217d606c286a9a655071a10e0ff6783b95a35cffff699ae447cad41e8f1f283e40fa26f05d8ca4b5be6496017636c40efac53b645d1636300fdcca8cf71886217b0daf074bf2b64161d92cb146c22d46b3710f2dbb47056fffd54e656f2342b690f6b183678b9b4a83f8f1ce307fbe3da1ab538037f53a6041cdb81a633a19733aa559925a01c7ec894c952b9f9151437fcae45b4c7d2ab0a5267fc386ab9d07ead4d1f284d528f6f0a2f599ca08791c96920095c80381102be6476ce75adad6672684585a6ab4b6f")
sk = bytes.fromhex("916de53ccbccc8b350fc29e7d0f1cc49b464a6b2d6214a97787abc4280ef5c35cff149744e147d2f42933ad1cd6582231a942b0d26b28e1dd328aa45c336cdd30fdb6418dee539fb81bde5cd145b8f28c0d5a068eb89d21d689f551f73a9ab42f8fdbb4689560a71a8ff1f8bd51111d6a3f6251b95c45fe58143db4096ab753ccb080a0ac30c24b12d40866414c42c944606d938304a88689ab84080b2215c4429cc2625549810128021e4926054a26d22b10908b341cc326e03a84089b684148301da2451d1306181128484a431dc2808cb288804969048c809032906e21831041240c80089994011410662483261c3440da3041144a08c49162e59a46518160e43b060dcc6119a386a8ab8300cb14c9cb64123101280262d5024042115844944065240422037059b884d9426221138701131110c05211207215c107092368d994492a0c0081b968d4c44648902421cc62148864593a488e2b425c4b42908155249448053040e21152024250d621645c1104ed2242de38831188824e0164e91866008b66d53864492382c18a131e2046902b28c8a4440cc088ce2906d22312404a904c2309018982823434a433242183420191492e002705a442d132691e1324d9210240c89855a04610b97449ca8500b228a53040e01c64ccb1421cab46da448018b1030e3c43011486d22a95112478cd1104682c86512b30083320d21c48850286540c644032865611270c0266c5a1069514401cb38920b06400c21691c06001ca030c9443288408ce238485b80259b466c99346902a95120c0811a422584167151366d8c0868c822669b260acb108690121012044d60806059c088243771a2a861a3c8205cb05011320d5b0272213552e1b0495c020401383253166813435109c30089208d1387844336121a88001a004e92206922b26c930232c12249cc146922b4494aa0252331622117702493841ab268e21604d9804950024d04878c11c660d3128900236e1034495000249b120003c62582264e50304ed9026c1100601ca02103a40800c8301341285a2260d818651b27819a04420337869a222c913072634824e4462d52302d59306883c26891962112180a0c222d0b454e814069a2980d12256e43108024b1690b06280c4305db12925b422a04c8301a485260444889484522075124952842088ea2844ccbc45023c12824a26d0c258dc8286041188084024d11c26113c88d5300685b1244910268c11065d40685a1080e03b184507ff2a51c416d9349852b87335b2ea3f743be9df0ed1ac95aa70e734a58ac4d141d5fa393bc422500f87f8e9b887cd8ba4326c85759751c84b6ff8e6378becbe9a3d972d7a78e1c6612599d5fb635300328424d4a5512490fd2b9a02eca27d97becd6eecccbf22ede3cb90212cfd6e631da00c5a10299411113b31974fbcbb363f378cde61a09e605b0b1e44bf88e60dd32398cf0860d05428f0e2b04da13d7ba1a5f6643bd1b5d61887df81dcc953c65d507f645f419ef3a2a1735e4582ebc3667116a145d17cf208b09abb25ef8a761fef9b0aa612630bb78fb17376cd906c0499560ca30bd9b21fed99b01f0472bb51b61ed0e9a88627720cfbbf0cd19363e13392aae58c4f6376c60aea61bd744c6d0a28c4ebf3c9c5a165ffe8caefaa20ea60a5b2ca8ef41828a046cfe7d8dbdb26e44f4ca3a14bd7b3f62fad013af13fc44fdb848db7200c8e7a78dd835cb78fdd70665aea401d8c74f5dc6fa0c721e1cdb4b0b7763b0b9ac3a0105737ded377b548b9c1ab819499ba2397917748065e9bf2e060c13710cdd4970f76c96b125eb1b4aea0101843eaad015b70ea9710c40f537e60cfe1b2a8e3f289ce3b80618243e0db799371a1c2a7c50b8855d43016e68ff93de110ecd9f648040cefd3f8a7f00fff7494b7a6c0f962eed378f2df09e867703bfc71093c471d7f4ded9abcf0f6cb8951f2ae8eaedc98e42c24a20559918461937221830fd35435f9aa5ccb7b45f5e45c24e55f7f429e47f3c592978c6202288cd79d231468bd1215f1497417e1c5f4dadbb42ed642ad75ca3c3fe66c7b9cc5cc67be2be330337d16694c688607db8f3fc7ba793db2e87014c7906bbcd460dd962e0523e6cd29b98ef495876537c0b035f66622ce1e8af4887569074b5af08d9a3e68e4574dccf852a98a2e15531cd71f9cebde83e450b610239e6a79992df41b33afe43268afd985eef707b0219bb1dcc49e30f85a6899eae5628c9f5bba266eb269c40592113f7562e2125032ceed69fe6ee6e8402f5acfbfaf73ad5f834213554ceaa0cf613567bfb72b92a68a17ce664dbd11dfe8e38cd66fbefd717e50eb55ab139be8ae686fae783174a59de16e20172e35e94cd0afd193e43db1746e4095e74adef13ed94c553167b1087a0e9a393bd8ca54ae002e519060017b9e1951648a742445f8ef428b4607a9bd882ca67fdeee2398114d2b5a80cfc256a3f0d52aca96fdc8cdd98b1e79f79e25e994bbad3d43fa57dec5157328ed76cf3be5fd955ca588bab8363d442b6d5677590574b602da2c10ce41c95616747c9ab2919da11a645eb1a01e654ad735845c432fc4245106e169eb3fb08a6324d8b6bccd1e65331ac633d43b0f404f4188e3728ff68553e3bdcf15d17b1313010746c3f457d951ef481ba8aca43283b3d26b154e004a38dbd026d86c0a62cdcdf401d5a82a46483af7eab22b4c0ee0f8791342e21eaa27e47dfbf4adec4149ff22e7d5c92fa24c7525812e92370a395d5c1fc477eff7cb9f9c86b25414ecda6051448b7a020748a84b58fa5fc79eae0e69e97324e39d702cc01dc257fe7c4e047cb40fcc4d1fda657bb02fe55c066c8ce63b6c562aa382289ecc7d8612acd40a856a68755210f0a511f64f242d6867edae03d3432925a2bd5d70a720ceac71c3b52994eba256765ffe013926ce54165fc338a7e029a97e6f49d36b5709915f64e71e0c815836dd82073f6091dfb9cb28eb367eddbda9f923f2e36fdd4b9ec72dedf179db64e9f227818bb5298cb0b8dd94f98bb13e120593bd680b0b40648cf44bec10787f2b79eab67be2ab69c513443692a5b9055df00ef86328872ae1cf572b0b328a3c699dd1daa56d12b9dd4e2cb41ece4de8260a95fa103259d516b80678d8ec004b9b6726f46e9dfc4dda0f382ae579f90c5f9751a1ab15eac8ed9786a24c977af602147a4d4270e68d808c5accdecf08b6a5becd4dc9412d3a3b3490b583038eb77efb6b3e20c5ee1103949687dc4fea910d1954d28c24ed8df154cf61ea8ed8123ad87afe2aa27ec9fba0623be0f0e4196b8540b869d0218f8a92e6e65ad51667d7176a5a23d2112e2953240498b6e481bc722c4fe9f9a394f9cb085a35f0c02bd5faad6ba60062181a8d821cde1b559e5bdad2cf5b402eda1a60e9a26cb135e9a578192fc3dc83a98d1ecc97b1709405719baa00bcc707d1f15b0c23923c4e156cacff767d8657e29d14c60f2e3db92ed88b85095c5e0caeec004926b4f162200f39cbf7f5d8d7a97950109cbd529b6443fc62d54b428ef1db893d069c7b54638dfa5b1851d97a75cb579535a99e1227f116482875b7f0e201092bb")

# PK
A_hat, tr, t1_new = D.pk_for_eth(pk)

# Compact PK for Solidity
A_hat_compact = A_hat.compact_256(32)
t1_new_compact = t1_new.compact_256(32)


def solidity_compact_elt(h, name):
    out = "uint256[] memory {} = new uint256[](32);".format(name)
    for (i, coeff) in enumerate(h):
        out += '{}[{}] = uint256(0x00{:x});'.format(name, i, coeff)
    return out+"\n"


def solidity_compact_vec(h, name):
    n = len(h)
    out = 'uint256[][] memory {} = new uint256[][]({});\n'.format(name, n)
    out += "for (uint256 i = 0 ; i < 4 ; i ++) {\n"
    out += "\t{}[i] = new uint256[](32);\n".format(name)
    out += "}\n"

    for (i, a) in enumerate(h):
        for (j, b) in enumerate(a[0]):  # len(a) = 1...
            out += "{}[{}][{}] = uint256(0x00{:x});".format(name, i, j, b)
    return out+"\n"


def solidity_compact_mat(h, name):
    n, m = len(h), len(h[0])
    out = 'uint256[][][] memory {} = new uint256[][][]({});\n'.format(name, n)
    out += "for (uint256 i = 0 ; i < {} ; i++) {{\n".format(n)
    out += "\t{}[i] = new uint256[][]({});\n".format(name, m)
    out += "\tfor (uint256 j = 0 ; j < {}; j++) {{\n".format(m)
    out += "\t\t{}[i][j] = new uint256[](32);\n".format(name)
    out += "\t}\n"
    out += "}\n"
    for (i, a) in enumerate(h):
        for (j, b) in enumerate(a):
            for (k, c) in enumerate(b):
                out += "{}[{}][{}][{}] = uint256(0x00{:x});".format(
                    name, i, j, k, c)
    return out+"\n"


XOF = Keccak256PRNG
file = open(
    "../test/ZKNOX_ethdilithium.t.sol", 'w')
file.write("""
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
//  Code obtained from `generate_test_vectors.py` python file

import {Test, console} from "forge-std/Test.sol";
import {ZKNOX_Expand, ZKNOX_Expand_Vec, ZKNOX_Expand_Mat, ZKNOX_Compact} from "../src/ZKNOX_dilithium_utils.sol";
import {ZKNOX_ethdilithium} from "../src/ZKNOX_ethdilithium.sol";
import "../src/ZKNOX_dilithium_utils.sol";
import "../src/ZKNOX_dilithium_deploy.sol";

contract ETHDilithiumTest is Test {
    ZKNOX_ethdilithium dilithium;

    // forgefmt: disable-next-line
    uint256[256] psi_rev = [uint256(1), 4808194, 3765607, 3761513, 5178923, 5496691, 5234739, 5178987, 7778734, 3542485, 2682288, 2129892, 3764867, 7375178, 557458, 7159240, 5010068, 4317364, 2663378, 6705802, 4855975, 7946292, 676590, 7044481, 5152541, 1714295, 2453983, 1460718, 7737789, 4795319, 2815639, 2283733, 3602218, 3182878, 2740543, 4793971, 5269599, 2101410, 3704823, 1159875, 394148, 928749, 1095468, 4874037, 2071829, 4361428, 3241972, 2156050, 3415069, 1759347, 7562881, 4805951, 3756790, 6444618, 6663429, 4430364, 5483103, 3192354, 556856, 3870317, 2917338, 1853806, 3345963, 1858416, 3073009, 1277625, 5744944, 3852015, 4183372, 5157610, 5258977, 8106357, 2508980, 2028118, 1937570, 4564692, 2811291, 5396636, 7270901, 4158088, 1528066, 482649, 1148858, 5418153, 7814814, 169688, 2462444, 5046034, 4213992, 4892034, 1987814, 5183169, 1736313, 235407, 5130263, 3258457, 5801164, 1787943, 5989328, 6125690, 3482206, 4197502, 7080401, 6018354, 7062739, 2461387, 3035980, 621164, 3901472, 7153756, 2925816, 3374250, 1356448, 5604662, 2683270, 5601629, 4912752, 2312838, 7727142, 7921254, 348812, 8052569, 1011223, 6026202, 4561790, 6458164, 6143691, 1744507, 1753, 6444997, 5720892, 6924527, 2660408, 6600190, 8321269, 2772600, 1182243, 87208, 636927, 4415111, 4423672, 6084020, 5095502, 4663471, 8352605, 822541, 1009365, 5926272, 6400920, 1596822, 4423473, 4620952, 6695264, 4969849, 2678278, 4611469, 4829411, 635956, 8129971, 5925040, 4234153, 6607829, 2192938, 6653329, 2387513, 4768667, 8111961, 5199961, 3747250, 2296099, 1239911, 4541938, 3195676, 2642980, 1254190, 8368000, 2998219, 141835, 8291116, 2513018, 7025525, 613238, 7070156, 6161950, 7921677, 6458423, 4040196, 4908348, 2039144, 6500539, 7561656, 6201452, 6757063, 2105286, 6006015, 6346610, 586241, 7200804, 527981, 5637006, 6903432, 1994046, 2491325, 6987258, 507927, 7192532, 7655613, 6545891, 5346675, 8041997, 2647994, 3009748, 5767564, 4148469, 749577, 4357667, 3980599, 2569011, 6764887, 1723229, 1665318, 2028038, 1163598, 5011144, 3994671, 8368538, 7009900, 3020393, 3363542, 214880, 545376, 7609976, 3105558, 7277073, 508145, 7826699, 860144, 3430436, 140244, 6866265, 6195333, 3123762, 2358373, 6187330, 5365997, 6663603, 2926054, 7987710, 8077412, 3531229, 4405932, 4606686, 1900052, 7598542, 1054478, 7648983];

    // forgefmt: disable-next-line
    uint256[256] psi_inv_rev = [uint256(1), 3572223, 4618904, 4614810, 3201430, 3145678, 2883726, 3201494, 1221177, 7822959, 1005239, 4615550, 6250525, 5698129, 4837932, 601683, 6096684, 5564778, 3585098, 642628, 6919699, 5926434, 6666122, 3227876, 1335936, 7703827, 434125, 3524442, 1674615, 5717039, 4063053, 3370349, 6522001, 5034454, 6526611, 5463079, 4510100, 7823561, 5188063, 2897314, 3950053, 1716988, 1935799, 4623627, 3574466, 817536, 6621070, 4965348, 6224367, 5138445, 4018989, 6308588, 3506380, 7284949, 7451668, 7986269, 7220542, 4675594, 6279007, 3110818, 3586446, 5639874, 5197539, 4778199, 6635910, 2236726, 1922253, 3818627, 2354215, 7369194, 327848, 8031605, 459163, 653275, 6067579, 3467665, 2778788, 5697147, 2775755, 7023969, 5006167, 5454601, 1226661, 4478945, 7759253, 5344437, 5919030, 1317678, 2362063, 1300016, 4182915, 4898211, 2254727, 2391089, 6592474, 2579253, 5121960, 3250154, 8145010, 6644104, 3197248, 6392603, 3488383, 4166425, 3334383, 5917973, 8210729, 565603, 2962264, 7231559, 7897768, 6852351, 4222329, 1109516, 2983781, 5569126, 3815725, 6442847, 6352299, 5871437, 274060, 3121440, 3222807, 4197045, 4528402, 2635473, 7102792, 5307408, 731434, 7325939, 781875, 6480365, 3773731, 3974485, 4849188, 303005, 392707, 5454363, 1716814, 3014420, 2193087, 6022044, 5256655, 2185084, 1514152, 8240173, 4949981, 7520273, 553718, 7872272, 1103344, 5274859, 770441, 7835041, 8165537, 5016875, 5360024, 1370517, 11879, 4385746, 3369273, 7216819, 6352379, 6715099, 6657188, 1615530, 5811406, 4399818, 4022750, 7630840, 4231948, 2612853, 5370669, 5732423, 338420, 3033742, 1834526, 724804, 1187885, 7872490, 1393159, 5889092, 6386371, 1476985, 2743411, 7852436, 1179613, 7794176, 2033807, 2374402, 6275131, 1623354, 2178965, 818761, 1879878, 6341273, 3472069, 4340221, 1921994, 458740, 2218467, 1310261, 7767179, 1354892, 5867399, 89301, 8238582, 5382198, 12417, 7126227, 5737437, 5184741, 3838479, 7140506, 6084318, 4633167, 3180456, 268456, 3611750, 5992904, 1727088, 6187479, 1772588, 4146264, 2455377, 250446, 7744461, 3551006, 3768948, 5702139, 3410568, 1685153, 3759465, 3956944, 6783595, 1979497, 2454145, 7371052, 7557876, 27812, 3716946, 3284915, 2296397, 3956745, 3965306, 7743490, 8293209, 7198174, 5607817, 59148, 1780227, 5720009, 1455890, 2659525, 1935420, 8378664];

    //stateful initialisation
    function setUp() public {
        bytes memory bytecode_psirev = abi.encodePacked(psi_rev);

        address a_psirev; //address of the precomputations bytecode contract
        a_psirev = address(uint160(0xcaca)); //here it is etched, use create in the future
        vm.etch(a_psirev, bytecode_psirev); //pushing psirev bytecode into contract todo : replace with create

        bytes memory bytecode_psiInvrev = abi.encodePacked(psi_inv_rev);

        address a_psiInvrev; //address of the precomputations bytecode contract
        a_psiInvrev = address(uint160(0xa5a5)); //here it is etched, use create in the future
        vm.etch(a_psiInvrev, bytecode_psiInvrev); //pushing psirev bytecode into contract todo : replace with create

        dilithium = new ZKNOX_ethdilithium();
        dilithium.update(a_psirev, a_psiInvrev);

    }

    function testVerify() public {
""")

file.write("// Public key\n")
file.write(solidity_compact_mat(A_hat_compact, 'A_hat'))
file.write("bytes memory tr = hex\"{}\";\n".format(tr.hex()))
file.write(solidity_compact_vec(t1_new_compact, 't1'))

# SIG
sig = D.sign(sk, msg, _xof=XOF, _xof2=XOF)
assert D.verify(pk, msg, sig, _xof=XOF, _xof2=XOF)
c_tilde, z, h = D._unpack_sig(sig)
# z with only positive coefficients
for i in range(4):
    assert len(z._data[i]) == 1
    for j in range(256):
        if z._data[i][0].coeffs[j] < 0:
            z._data[i][0].coeffs[j] += 8380417
# Compact SIG for Solidity
z_compact = z.compact_256(32)
h_compact = h.compact_256(32)

file.write("\n// Signature\n")
file.write("bytes memory c_tilde = hex\"{}\";\n".format(c_tilde.hex()))
file.write(solidity_compact_vec(z_compact, 'z'))
file.write(solidity_compact_vec(h_compact, 'h'))

file.write("""
        // CREATE PK OBJECT
        PubKey memory pk;
        pk.a_hat = A_hat;
        pk.tr = tr;
        pk.t1 = t1;

        // CREATE SIG OBJECT
        Signature memory sig;
        sig.c_tilde = c_tilde;
        sig.z = z;
        sig.h = h;

        // MESSAGE
        bytes memory msgs = "We are ZKNox.";
        uint256 gasStart = gasleft();
        bool ver = dilithium.verify(pk, msgs, sig);
        uint256 gasUsed = gasStart - gasleft();
        console.log("Gas used:", gasUsed);
        assertTrue(ver);
    }
}
""")
file.close()
