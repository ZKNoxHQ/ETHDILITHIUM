from .dilithium.default_parameters import Dilithium2 as D
from .shake.shake_wrapper import shake256, shake128

# An example of Dilithium.
msg = b"We are ZKNox."

pk = bytes.fromhex("85851a6708bd037c46c93f3b05a130f9a6efe6e1db306ed3639dc0733475487d5649a43a8c426ab3c19008095209988e61b9807da29061f86d9d57c69765a4059f0f1ceec6340691df3ad0b49e06f6a66324e3a2b889d07b228c277a71e583a81d468dfe025238411bb948ab788969fafa1bfbd29f3d6545a90265da93ba5990034f51b7e49478032eb6fe1c9f7fa391dc9b3c2473473d8ae617ada12eb57483020f5fb2c487bfb72b1634a5f91706a86acb965e8b1238a984b67801eca17fd2595f7d92eeea1ccba1ee46bd46b089d337e013849ba1277725e514a05aa216c33528275c249fd4d18b6bf0d0c641655423644992f643cb6099a855a3933024d694529ec8e8b6ebfcda02fc6513bf51b14f8e32ae0fa86168854eb2d9760d3e79e8baffd2e290ccd1810d70c072f2256422ebfaabcbfec21e8d3ca8a5f258136965eff5dfbb9423129a37d2b4a7e5c0840dcec2fb15b9f411d1b5883fda20bcfccecac4b74f423abc1a1e9114a62e6650cc4c00470d362a7bddef3ab9e50a7cbf5cea832792c6fda35f60b5532229268a1564ff29957f026c42218baf401cd354ebaae477f4c095a1bbdf4a0641ea176477794645c1cef64547428a61381b77e55400484b17107d5e8075b1bf0c7cac40aa67a98a67c38a5252afeb52d8914b15abccb187de1ff3ce2cd5b9a1d8b1b4aa835b96407c5877e0f18ca6a795f98bceb92a0f08310abf0075de9202e14f18601a046d0df592f28ecafcadfe5114cfd66fe8c83dc42aaf0fbbfc95b5b063243d0a33b20ccb04d82bc67b448b006a355f38efd19907153e5d0c8141eb36016566e53b86806f2115e413462aebb63335c5f76e5a6daa303ccefc38dbfc2f07dab2a58e1ceb31ade8adacf4e713970fda7318b09b42b9e70440f0ec07b6cdcece763af8e3651a0bd0b01b8c310952d1c271ec0f8f34b97a1c2581e9628abbd1ff5b242d8fac3ba0ef6d6481c2d97918b46ea549feffc8988527bfb1789ba6834615630535b67fca3ede03199a89706cfa56adb37d87cdad501358dedb8dc9a86cfb400d443ab471f32232d8c0a340e628c9d4b6836edc7ae04e10c8c28432600e218fc3a0807329a962ee168ff8ca7b8ad86523775dbb034168d2e22b6831428638c08ad054ba81708ed38c3cdeb4eb2fb26522793676f0c4434794ba53c00138b19a9848625221ed076090827be0dac55bef071bdb40ef293784b7fc2ad9fd934a2577df49347ac7dd9f64bb6decd13c5652165839fdf2e61b6cd96081963733b374aee450edbb408ad95d8616f5937f3c5ea89ac658c6aa2103d41e47be8e1d8dd6ea295af97f3780b529fff19f6a5827b5fde853a1511a73071e75d93fc5057d6e3a168a36a76c82b98636b7aa1e8688ea40a0131745ebaaab5398b3779b62c853e182addb9b3b43c62da865df870c12d49a3d1a1d8b68938e30d61453fe720167fd5058308bd5b983960d6d5b4d24d09ad5abf3a1e3b605e7a01fb74e4ee273e81478f3574d193918d455b416fbaaecd5b8e840c5c360dda85c12733792cb683d516cfd71dc1996bd6a411f34431a5ba69a6aebdd3ab8a5242aa29fea1018b43342495470f09e3ea09f569153a711b7ac1b4b0034502abe57c05a9ea5f4ef3cc58dc36bf992c29166d74c98a4bbd64ce4d0ea2afa3fdedf816df2c87db3ae1e9f620925d3a2d862ffecb0db86e32609fb207646e5d0fb9d15d827721d6db79119acb0e040d4ed5f770852ef370bb829973424e7a09ca1455d39c2231b676f01cd1348dba5da2578b9e66b4361b9feaa5a0055b47ecfae3a868b08b26329d05379f6a8d07847cfa557d6ddf315fbb42c")
sk = bytes.fromhex("85851a6708bd037c46c93f3b05a130f9a6efe6e1db306ed3639dc0733475487df0e6277fb5f50de232b0ee9e51521ae7753d55666f096249b7def53bfd318df9f255e2fe07195196918cfa477d0fad1727361c68179a04fcc793a3de0bbf175b1fc243a345506cbec30e0d76eb77dd3fb512c914a1e8a9dcf78209e75c4b22df10364622a94502b64ce3088622b82c23452142404a54286622392e01462e98b60859826001156193822d0a341020c94840c004c4a2208b9489212728c2b88180c46963822424200220a60020c488a3248223095012c5111a2421d4240440002e03496e8b022a08c00c5814862043241887491b936c63288d231748da006a188684d4886500060dd8226c0938701bb08898966462125014096480162943b288a2b8890a012c42488c93a42d0048210a236d1ac30583c48921445202c671630052d2067182c605a4342a2140620c1106c046640910015b840c14470589242559a641184491213025ca368e11474644b86d52405213020ed9a0414418448ca684c18891d1c08dca4664d4204588943001b44024138e440650099085d3162a21a589e1289002a3850aa2640c4529118865183549d20069d8288ae1320d64064c81b005132982d2c88d60181120a72888c2690c897158340e83c62c0c400de310420c12020ca6200034414900455cb8208944864c884882968544124d4a2031db38251c19809894201a872c5b12841225210895240cb04062c2241b837119250042926cd2466948044c1807508b14499ca009a0844dc23252229521084931c0100a1389259aa49014252a0c32011233511b062d1ba5240b270d92006c0c392881242c09030608960890848c88262ea44231003701183372c12809c3982110324ecb32511a45280299511c226208b24d021420d82400dc980412a40c21928110c86013403042364249c8458a460d22820019932022295194202803216422428e404450020189d4c260184628a03489213989cc02450b36440a042d88881108470e48904508a6040a904c63a07108c670dc8649a1985083942421a96910121014b1650210120a868c58225263120d00b66d59208989460018362019122c61400a00a5484326314430810c3366a4444e1203521b28202385250c8450d2b2250b9429c81685e3844c5310090b28115ca05011052da0b281a1126614a5651c200d8c8231104490491002191785190742233444c446681b390690384e91288cd1324e141732d9b51d9fe1a1c3a5ad851c4bea8fae8601fed607fc8bf8764d4ab8b10aec405cca8066a6b5bf9cb2ad03e1b4470ff2a364734c4239a4d57c503581d666d152efca1fa0352dcb8dbe4682443cb6943c240dae39de8195504b164c7efea44095ff8a5559176db0918489cc3231b90288746382a1a676e3f2bd18531d10ad42252d01cbd9633c6eaac60d6c9dc1dbc44f8179059ae740136154e01cb6b533dc704c21482fc1861cfc0b12c5e38eb5383828a3afc94bff3de87f0acde48660a1475b27124bacd3cd0826ebe626cf6610b3198e0b1c24abd5d6d6457eb910c1fc0d572c24b43e54a41668a097df6ab09f09a72b3f252e5cd5041509a204f3974b9c2397eff900152140f575d5cb4e1ea702d22a32ed0112205bf5cd59f5bcf93ff875a6ca0e4631ff7017fcd17ee42d627136f531e483d823e9d66aa324b9f333d9090c20f5139d762228af74669fbff50831d2aed27ecb4ff50d8785d9de87d1f785e17909137265d7e78dcbdd8e85cad4e546743a5135ad20b27680c5f9a07d51cd2d798df7fc4acae0f746b37c39207d88ed74015b0cf80f6e9a042fd86e32317b3568a255b9b26fc5ad87b5d78b9a9423ad0e4acba99899cad9818c99763194066da5a087df45642b729eff6436f1dc2d0b1a8e23d04e6ade5cbcd17ffa5d29f010f47dc2bff09201777453c1c9db47d33456d82b5902f2b546034bd950f680fc30f21036668c8e890d3ffea80378275ab17040469628972a1e55529b42d437005e127caaf838e6e31cdf9a4a5d1b09e6f430180f29f8de72ae9c3a809f7310d738c691668639606ba423deb4eb407f3b5fb8e66a1617dc637efa41f9f5e9348a21fd302fca9ad2f6e46f5fcaa57582a791b101ffb2b566a738f1e82316daa30d071088bc37974a00843481f892b12a97e364edbeac0e4c418051a867ad98fbeca8dc58968345a4fb72918bfe8ca2f455a92f4a97f132882c61c8eff8d0251816d8918c3f9e54f6b77f0e3fa7ea3660f3409694c111233efa8033fbbc3b0667c4adb622a1fa07e6528bbee3103d7556856e9e4b33a13f7c26ade7c214e8b00b0bdf2b51ac66ecc4e7326ccf0dab81efed3fefdfbc347c6f9576fe603e5ee9e0ae6e0371bc56de24626db894ddfd293b15a147fbd8bc142c3d4af4e7524a708d102a2f34349e6df00b8c6d56e939e52cff30b736af830803348bc5e4083db5ff0e5a655266f867948d244ce8ca3b4ab0406dc0c362580e2be10d3aa9ba5937ecd6717663a588a2234d99ca953ec8e1ec5c2f8a56220adfaf8484654896e07441662c8048316b7afbac12e93f258a1add13d0a95374f8050ef0a65c68906251f2c05a148ba379fbf6f99301c7e7f5be5f38305dd625728cb3a98602398d035f04be3d6e23a0f51e875ec37ae46f54d50c4c2b7b0b92fbfc7141fddf8586786ec3e49e9fe076c425845c8a59450755b1b1e7735a886dd9cd506e75bbd1ba9b35dce0c0ce55fdefdcc8e410ac43554e63b5dde9b378d4dc0d6122ad0b0272b1e21e9d8529aaf83083400bf50db20a0c16c14aaf585b31e833924a14b8873f691de52476a84fd94fa5e13c9dd4daf448f143d300f187b5ef94253457fb7b83a4d4c8d2e02fa5653e97fe8cbaba0f4527246a065d5e9b85f08a12c4ae50bde1fa95a810df8b30f898407d719bcf02def798f23eba7a11d99ed407d7c599663d2cb4c6f8f4e7bc218189b5303bfd55a74a8ee5b3c9b40fa87b194109cf96e26a56448b8aa8734dec92206e36db131ddca6bb92251543f5fede993faa38a53a3fd921e78e990bdc84af5d4f2c6bc95e7c624ff5d05ab4f7d1b25c908dc2b4731d5927c5575690a7211b9e453812bcd26e379ccace112ae2ad45209d37de8434c7170d7790c757ce1b5169f7cbb1c87e21bcd4e82db6b8462d1220d01f1c89730033f0d10e6cbe4c13561f4ca3fa715d33d63df46934e4a29603d72b7ca22bc5a8544c48ce07b0e6ecaf342f6d6df9628995b2e881ede54084d80c38f098f7a176a7f0a1abe80dc33eefb44464dc9f58c124ebcac3abc52b36e2557d9edaf4dc662dc1b24335bf51b36836266b7316bb02ba7d9b9bf00c41d685d6bea5678b63c196c61cbb48e43c352fa4bc881e98dd7fddf0818753c28e47ad2198628ed271b2f70f31665c71dc58b2dbef0f1cc7a9ec7a74336390b12198ff95f046433ebbb35e0df88985c9f22e6a63ad331701e863de44ad9c49f1606501be5dc39fdd45e6f904af29fcb89841a4c35a0c8869116dae16f1809b3fd470a142e3deaf54196e762103360911d2fb86f120b446aae97809e2c76a7228fd3d75efa67b753f12025bc8f510")

# PK
ρ, t1 = D._unpack_pk(pk)
A_hat = D._expand_matrix_from_seed(ρ, _xof=shake128)
tr = D._h(pk, 32, _xof=shake256)

# Compact PK for Solidity
A_hat_compact = A_hat.compact_256(32)
t1_compact = t1.compact_256(32)


def solidity_compact_elt(h, name):
    out = "uint256[] memory {} = new uint256[](32);".format(name)
    for (i, coeff) in enumerate(h):
        out += '{}[{}] = uint256(0x00{:x});'.format(name, i, coeff)
    return out+"\n"


def solidity_compact_vec(h, name):
    n = len(h)
    out = 'uint256[][] memory {} = new uint256[][]({});\n'.format(name, n)
    out += "for (uint256 i = 0 ; i < 4 ; i ++) {\n"
    out += "\t{}[i] = new uint256[](32);\n".format(name)
    out += "}\n"

    for (i, a) in enumerate(h):
        for (j, b) in enumerate(a[0]):  # len(a) = 1...
            out += "{}[{}][{}] = uint256(0x00{:x});".format(name, i, j, b)
    return out+"\n"


def solidity_compact_mat(h, name):
    n, m = len(h), len(h[0])
    out = 'uint256[][][] memory {} = new uint256[][][]({});\n'.format(name, n)
    out += "for (uint256 i = 0 ; i < {} ; i++) {{\n".format(n)
    out += "\t{}[i] = new uint256[][]({});\n".format(name, m)
    out += "\tfor (uint256 j = 0 ; j < {}; j++) {{\n".format(m)
    out += "\t\t{}[i][j] = new uint256[](32);\n".format(name)
    out += "\t}\n"
    out += "}\n"
    for (i, a) in enumerate(h):
        for (j, b) in enumerate(a):
            for (k, c) in enumerate(b):
                out += "{}[{}][{}][{}] = uint256(0x00{:x});".format(
                    name, i, j, k, c)
    return out+"\n"


XOF = shake256
file = open(
    "../test/ZKNOX_dilithium.t.sol", 'w')
file.write("""
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
//  Code obtained from `generate_test_vectors.py` python file

import {Test, console} from "forge-std/Test.sol";
import {ZKNOX_Expand, ZKNOX_Expand_Vec, ZKNOX_Expand_Mat, ZKNOX_Compact} from "../src/ZKNOX_dilithium_utils.sol";
import {ZKNOX_dilithium} from "../src/ZKNOX_dilithium.sol";
import "../src/ZKNOX_dilithium_utils.sol";
import "../src/ZKNOX_dilithium_deploy.sol";

contract DilithiumTest is Test {
    ZKNOX_dilithium dilithium;

    // forgefmt: disable-next-line
    uint256[256] psi_rev = [uint256(1), 4808194, 3765607, 3761513, 5178923, 5496691, 5234739, 5178987, 7778734, 3542485, 2682288, 2129892, 3764867, 7375178, 557458, 7159240, 5010068, 4317364, 2663378, 6705802, 4855975, 7946292, 676590, 7044481, 5152541, 1714295, 2453983, 1460718, 7737789, 4795319, 2815639, 2283733, 3602218, 3182878, 2740543, 4793971, 5269599, 2101410, 3704823, 1159875, 394148, 928749, 1095468, 4874037, 2071829, 4361428, 3241972, 2156050, 3415069, 1759347, 7562881, 4805951, 3756790, 6444618, 6663429, 4430364, 5483103, 3192354, 556856, 3870317, 2917338, 1853806, 3345963, 1858416, 3073009, 1277625, 5744944, 3852015, 4183372, 5157610, 5258977, 8106357, 2508980, 2028118, 1937570, 4564692, 2811291, 5396636, 7270901, 4158088, 1528066, 482649, 1148858, 5418153, 7814814, 169688, 2462444, 5046034, 4213992, 4892034, 1987814, 5183169, 1736313, 235407, 5130263, 3258457, 5801164, 1787943, 5989328, 6125690, 3482206, 4197502, 7080401, 6018354, 7062739, 2461387, 3035980, 621164, 3901472, 7153756, 2925816, 3374250, 1356448, 5604662, 2683270, 5601629, 4912752, 2312838, 7727142, 7921254, 348812, 8052569, 1011223, 6026202, 4561790, 6458164, 6143691, 1744507, 1753, 6444997, 5720892, 6924527, 2660408, 6600190, 8321269, 2772600, 1182243, 87208, 636927, 4415111, 4423672, 6084020, 5095502, 4663471, 8352605, 822541, 1009365, 5926272, 6400920, 1596822, 4423473, 4620952, 6695264, 4969849, 2678278, 4611469, 4829411, 635956, 8129971, 5925040, 4234153, 6607829, 2192938, 6653329, 2387513, 4768667, 8111961, 5199961, 3747250, 2296099, 1239911, 4541938, 3195676, 2642980, 1254190, 8368000, 2998219, 141835, 8291116, 2513018, 7025525, 613238, 7070156, 6161950, 7921677, 6458423, 4040196, 4908348, 2039144, 6500539, 7561656, 6201452, 6757063, 2105286, 6006015, 6346610, 586241, 7200804, 527981, 5637006, 6903432, 1994046, 2491325, 6987258, 507927, 7192532, 7655613, 6545891, 5346675, 8041997, 2647994, 3009748, 5767564, 4148469, 749577, 4357667, 3980599, 2569011, 6764887, 1723229, 1665318, 2028038, 1163598, 5011144, 3994671, 8368538, 7009900, 3020393, 3363542, 214880, 545376, 7609976, 3105558, 7277073, 508145, 7826699, 860144, 3430436, 140244, 6866265, 6195333, 3123762, 2358373, 6187330, 5365997, 6663603, 2926054, 7987710, 8077412, 3531229, 4405932, 4606686, 1900052, 7598542, 1054478, 7648983];

    // forgefmt: disable-next-line
    uint256[256] psi_inv_rev = [uint256(1), 3572223, 4618904, 4614810, 3201430, 3145678, 2883726, 3201494, 1221177, 7822959, 1005239, 4615550, 6250525, 5698129, 4837932, 601683, 6096684, 5564778, 3585098, 642628, 6919699, 5926434, 6666122, 3227876, 1335936, 7703827, 434125, 3524442, 1674615, 5717039, 4063053, 3370349, 6522001, 5034454, 6526611, 5463079, 4510100, 7823561, 5188063, 2897314, 3950053, 1716988, 1935799, 4623627, 3574466, 817536, 6621070, 4965348, 6224367, 5138445, 4018989, 6308588, 3506380, 7284949, 7451668, 7986269, 7220542, 4675594, 6279007, 3110818, 3586446, 5639874, 5197539, 4778199, 6635910, 2236726, 1922253, 3818627, 2354215, 7369194, 327848, 8031605, 459163, 653275, 6067579, 3467665, 2778788, 5697147, 2775755, 7023969, 5006167, 5454601, 1226661, 4478945, 7759253, 5344437, 5919030, 1317678, 2362063, 1300016, 4182915, 4898211, 2254727, 2391089, 6592474, 2579253, 5121960, 3250154, 8145010, 6644104, 3197248, 6392603, 3488383, 4166425, 3334383, 5917973, 8210729, 565603, 2962264, 7231559, 7897768, 6852351, 4222329, 1109516, 2983781, 5569126, 3815725, 6442847, 6352299, 5871437, 274060, 3121440, 3222807, 4197045, 4528402, 2635473, 7102792, 5307408, 731434, 7325939, 781875, 6480365, 3773731, 3974485, 4849188, 303005, 392707, 5454363, 1716814, 3014420, 2193087, 6022044, 5256655, 2185084, 1514152, 8240173, 4949981, 7520273, 553718, 7872272, 1103344, 5274859, 770441, 7835041, 8165537, 5016875, 5360024, 1370517, 11879, 4385746, 3369273, 7216819, 6352379, 6715099, 6657188, 1615530, 5811406, 4399818, 4022750, 7630840, 4231948, 2612853, 5370669, 5732423, 338420, 3033742, 1834526, 724804, 1187885, 7872490, 1393159, 5889092, 6386371, 1476985, 2743411, 7852436, 1179613, 7794176, 2033807, 2374402, 6275131, 1623354, 2178965, 818761, 1879878, 6341273, 3472069, 4340221, 1921994, 458740, 2218467, 1310261, 7767179, 1354892, 5867399, 89301, 8238582, 5382198, 12417, 7126227, 5737437, 5184741, 3838479, 7140506, 6084318, 4633167, 3180456, 268456, 3611750, 5992904, 1727088, 6187479, 1772588, 4146264, 2455377, 250446, 7744461, 3551006, 3768948, 5702139, 3410568, 1685153, 3759465, 3956944, 6783595, 1979497, 2454145, 7371052, 7557876, 27812, 3716946, 3284915, 2296397, 3956745, 3965306, 7743490, 8293209, 7198174, 5607817, 59148, 1780227, 5720009, 1455890, 2659525, 1935420, 8378664];

    //stateful initialisation
    function setUp() public {
        bytes memory bytecode_psirev = abi.encodePacked(psi_rev);

        address a_psirev; //address of the precomputations bytecode contract
        a_psirev = address(uint160(0xcaca)); //here it is etched, use create in the future
        vm.etch(a_psirev, bytecode_psirev); //pushing psirev bytecode into contract todo : replace with create

        bytes memory bytecode_psiInvrev = abi.encodePacked(psi_inv_rev);

        address a_psiInvrev; //address of the precomputations bytecode contract
        a_psiInvrev = address(uint160(0xa5a5)); //here it is etched, use create in the future
        vm.etch(a_psiInvrev, bytecode_psiInvrev); //pushing psirev bytecode into contract todo : replace with create

        dilithium = new ZKNOX_dilithium();
        dilithium.update(a_psirev, a_psiInvrev);

    }

    function testVerify() public {
""")

file.write("// Public key\n")
file.write(solidity_compact_mat(A_hat_compact, 'A_hat'))
file.write("bytes memory tr = hex\"{}\";\n".format(tr.hex()))
file.write(solidity_compact_vec(t1_compact, 't1'))

# SIG
sig = D.sign(sk, msg, _xof=XOF)
assert D.verify(pk, msg, sig, _xof=XOF)
c_tilde, z, h = D._unpack_sig(sig)
# z with only positive coefficients
for i in range(4):
    assert len(z._data[i]) == 1
    for j in range(256):
        if z._data[i][0].coeffs[j] < 0:
            z._data[i][0].coeffs[j] += 8380417
# Compact SIG for Solidity
z_compact = z.compact_256(32)
h_compact = h.compact_256(32)

file.write("\n// Signature\n")
file.write("bytes memory c_tilde = hex\"{}\";\n".format(c_tilde.hex()))
file.write(solidity_compact_vec(z_compact, 'z'))
file.write(solidity_compact_vec(h_compact, 'h'))
file.write("""
        // CREATE PK OBJECT
        PubKey memory pk;
        pk.a_hat = A_hat;
        pk.tr = tr;
        pk.t1 = t1;

        // CREATE SIG OBJECT
        Signature memory sig;
        sig.c_tilde = c_tilde;
        sig.z = z;
        sig.h = h;

        // MESSAGE
        bytes memory msgs = "We are ZKNox.";
        uint256 gasStart = gasleft();
        bool ver = dilithium.verify(pk, msgs, sig);
        uint256 gasUsed = gasStart - gasleft();
        console.log("Gas used:", gasUsed);
        assertTrue(ver);
    }
}
""")
file.close()
