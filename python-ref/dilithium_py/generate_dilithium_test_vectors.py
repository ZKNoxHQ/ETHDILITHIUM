from .dilithium.default_parameters import Dilithium2 as D
from .shake.shake_wrapper import shake256, shake128

# An example of Dilithium.
msg = b"We are ZKNox."

pk = bytes.fromhex("09502a521fea69870caa397fe86c12fabda1e3f055bd968702e03c80e9f4ba6afdf7242a291c747f1fcc282f108e21e9c98d074042cbe7f57bb95e9b3d17ed00edc32ecd24e2bb8a77248be0d819354079d92dd7192083ad409ca20c2840e134a000ed7ab20deed786b8d866f2fd64b39d3e4b6475e3cd9e5aaf6ccfc20902b70f27ad8824f54c0a799730b1876480b265dd92e8bdd6e6f3a0e4f955c711647cd3202b23396569e8d7aa8628c9ffbed873b4b3ec5fec55f470b83cfbbcdc2b4bbe210347abb32d9e61a1603a226ad835831ea79cbd21839645955530f85297ef06a0ab5b789fbaaaa1ff042d3f8c27d78f845a2b072112776d8bd146b92083ad87fa409d2f3f0037ddf9ee3bcbf971661957c639c0ce1ea55ce40e66145c817ca457757e8ddf6d5c9ec87215af424ede0628da297548714e297f7e69569ccd598bf6faa8b30dea3673d75030f1df9c907309c33fc21beb7950dc18916e045ef3937eb3ca1cb23ef14b08bd8aa3b88534791cee518090e22b22e1e08c9bfeea798314e158a8bb2c6f6f65e36205a944ff9b0f55d55d3fde9be74e01c940d5851e4fee809c39cc479a6d9572baad1fa1ee0275629871041620db585fe76ae502f25763bbf53ecde8081d4fb3275b330673b18057c844dec5eae580b91d70a56312cb7bd6e8f050ee176a8cad0613fc797197be0edf483a3f694ac470a907b90b3ae879b041a1edbea0f6be0b5d10ad70b2c4d5632caa81665c3a8de83d9127551d62f79f9008236028d8f8fef4659df4ec698191dd40e3974b97a5a378e6f1288924f08ad6deee768afb54cd0e3338ea2803f43e19f049831fc6fe79dd539d88f2637865f13984146e261b40b14c82dbf7a82922dff12c4fc5c4b7f3188dc75d154f0ae4bcf5b79fa4fc4fec06804cb79316a4ccfef834055609adba795f984519c71d9a0c768ba6f9396b94581bb46c0610b38ec05b630cce630244f104b89d51a6f395c8440c95c96b5c969c17553ab067f53c3c91979b895cfd005b2d88abc2bca6b116fbf98c7f1283c49fe3b9f0cff95b6b78fc80a6d7564ed2e43cad91f8810cd8a97bc1326f7fa7d546dcc61e1bc24402faf16882d2cb013d5b768bf697e9ac50cbadec4a8cd672252fc9ff238865800f28d0877ebef64e8958eb78e23595659c983a234085b83b2b8b0f48e5c5f7a0a3c4942753195f9af280de3ae5294af3bd3f86a2bff09266f3344731d9fb25e1617f026bab04961329307fa5a315ab8bf44960e80897952997ecafcf082e6cf9fb418351528dfb55e78dc17530d1a507050e5bebd11a8ec237146fa2ed5ca73d255d39b88001a43b8c0b545aa931d66285903a5c0c3ba229b8c3ffc4e1527628ffaead10b8b047d8dfe2771a0aca7a2673959c9a218c707693117453ecce0b04fcdb976a033b44156529b07b67bec732a47e46f63804bb851030f98033afe0351766535569a3775e217beab8d1af3b1f1f7115a6bb3b5f8c1af7f02b06e6fd42385d6eab2cae3c190454a52f39ebfa6dc9b56fbf0eb790022e5922916b6285f96ed5cd4be506e4eeb5eae145c9aef477375175c7b9dd47f4a85ee73bb48e74e73abfe6c5daf69171dd2ace3cb96fac82fab5d3238f804a6d0cabccb6c6e8476e0711221d4666bff18d855ed53b89f98f40613751abb247bdbc0072e5a2e41a4b2b1796a14acdb375c4469428ce5439518704540ac33dc91e3720c712cc685635c56614b8da77487c7277437700bd0510683ec7e6ba8531f15e5e57d845dca8585c70b3f7995f1c925be8d96dbcf055095929f8929d760a7f8130e18876ebc3569bb2615c823c58dcf72a681f9d86")
sk = bytes.fromhex("09502a521fea69870caa397fe86c12fabda1e3f055bd968702e03c80e9f4ba6ac0c7bdf5fdc81b9ea6b16fb34c1fb4b83161190d4ece67be4e002231e471c53f96fbaaab4feb7d969dfbdd2c1c9970dfccd1e184c51b981b33f3c40eba2970fda208880bc0400b308613b64488b26d00874d20861002380688c6405316244c2808d344101ba2845c464208934521230188480491864062a68812858d94b06508402691c2800331061c94640031725b34808a38820010010032054c06801821421a172c91b208cc026c1b854120a26804109050342641806024000688260cc2424dd4b04d1a1470a1009223417299264004c92d91268622968924c2301c8221a13272d9a80541c66d22b62840a0881b944414002c22966804094e04940c5312641c353213083001328a242190e31489d984214bc08c98282a84a2210c378548228588200210236219a79062122422446e931452e2344914262690a06c22b86918188c6124095b008153901109318cdc2665c848845ab02c90000e0226660841295844864014460a98212128919c20042032328316604c9260a0920804009100822c9a461121040dc130721010119830400ac08d13111204442598288481862c5884208202900902518834010b0720d9b491194741d3265011b28443248992942522996d430248424644dac4080a87701ab5859248804cc2684222482121124940418a147288480213266a5b20641b4584c486600a016e54487184c64d20294224a360c4460493446898008602a590c93625100120101770210540091731041741128568da809083220e01a80484444a02950409328901a809c9b0888846628c12658cc04843165053324901452813870d0cc6811ca98d1c8430d1b20cd3162859242804a26c20130440949123876cd34449244912121126081132109041c8306803048114836dc3302a80b229622631d81625e22030c31611dc848ca0360402c3090c012909b12158408044904c020884e348448918100c34511b08111237061c23521b022a4c28444a228c83366e21046c23986049222551140810046911422919b7610438896344250bc068832425ca3228549825108425009909441224daa24de2c24c90166adc0031cc220224184999a48dd00244d1b809d10002d1848110c761d8224c912271cb8428c23088e41284c0c86c51b2204046418392010c154e471fa224dbd6e2d70f4c6c2d2f740dccb55806937f84d71b9110b8ddff8b8d002212133f71705608288d49429c6d0f816561a6258c53ac1d01a2135d2c3fccd77b7a92caecf91c67a06b91545107b402952d98b2b9000e912cebab2664dbfe27fcad37aaf03469d7f0c213664f426a441a5f75b2c810a0d52ce7673d815fd98279ac3f674daed9abca6d766eb5eac9b3ed1907fe078e00a84a1e37809e3466010e64612c24c7d687d4c54eab8211bd8786e954a3b2fcbde8466db5a3fff978536a87d89fb11a88c642043d16ff808418eb1d04cc6db4601e1b19c6d5af1faaf2c6277a48f41d94ad285999b5b52d9ac33f9aaf666fdd968a69ab88e3018b91094ddb3c74ea7a4301715b8184a40f3def9d073c403480179bd402b3e9fc467d9c205a3046983b973da24f0d5f02cc7a94eb8200c6dde6b89860e47430889187aa21071e9304f5a4b997a640064316b172d9fb9e1234abd2f424c87af811042b47150be6269ccd8eb9217d9daa92dc477dc1bbee5bbab4a55d08bfff345b2d51ebcd3354b37ac3cc9a9fc145362b4c18d3583501b19fcf27603e0392fbd59466a5aeb68126e7eb50e0a420e425bf5634bffa299a64f4e6df94245054b12bb827952b6efc0ed57f7d072e0b0985ef162cc471cf9ba5229f18a86e19887a7056dcab42e0279f2a89d159e54c63cacbd6516a8c470a53e536a5004383c0a1eab7f2e59868134e41544bbb015148ef033942ff78bf22dc7223edc2dbe809f10806e4ef800376009271382c00907025dcfe459f5272d79c760bf3e4dc45f0d948f6437c4f164ad3f0db382c04b724f34e8fab9a410d56b6653af06c653b1ffce0af3c3359fac182bdd8853529133db5a0ed25c08d41cfcac339b6229943d7032f3881b1bc5efb132ff4d5a77d6fad1e0dece8aa7b6a1b668aa49c56923cdafaea98d97dda81e2c3b6880a85f3f84c0225951fbcb8f5a63281e53983939b9e871d2f6c900da9fc20df95664972aa2c7c3e71be90fcc7b92eace6fd626efc362788876774694cd182ed49fc487a11790d3f0c7a770e8f74aa3a4d1663a4a63df4d64742759ba27da3a44dc5bbea38b8a1b58f35c395c60e04cc29748534276eca994fc9edf372221a146ea2afb173124c02fe8f264782b0493543a8c60e037eaf846a2b9169bde0206551911db7d448a7c1ab7b6348a62d36d04afecc137db9ac4cedca18e163c7727cdc0588a60bca76ce7ebddf433f9e55fcd7626c158879ecd5ccf701199a65db8c54263065b47a311b7cc0f1c4b4e90ac405ec17ceea3789e20b59c09a1991c44731387ed1dfa0a28efc5ff9bf6d07f6f791bad9d0d564a2b9ea17a52d987fe35473694d3f7e9ab5846178cb71b8763973c79dff8881f3c4c6f45d5a8d05bd297a2aaa20b48be4240e1a46f3d26cc683abb6e7730d860d2345823526d4d40012d4276f2548243957df2143bf2ae0f8faff581de32535fdc906e10f3e9acda17ddb0d2d717c562b2d3a90b76d6c6974d3fccf1c074c40176c5013c66d2561c18885029af0fbafd99cd24d0243cfe79e84bd577ad1ae6a3d870aa4caf66697a8e5c499b58e20ed4171b776928be6ef068fd004c4f42b126eea9e37b57cc2d4a810f8a8f9bb4c3a8ad5f5b5dfa13d8a1517e990af9654e6165d996a7ba32846012b3761f57e0cbda71a97c3e62102b00706e7f1c8218015a7b125b2834e43d65977407fffe29190b056583605d5a6925ae03c2c1291e4adc047fff78c2a285d929e9a249a53c3fdb66f3dc5f15f811affe2ff0a22596942482b9a780b110432cddff801e7aa70900989586b7f1cb9473da19a0e1864a6d5116f36763dd2633d0d711e2d664b34e67390bb7486eb73e5e17c1a06da5c12b10217f27bb6ff53fdae02df20b482f643f95eb36fcdb324c88c642d552f4917ae997d2c29836fa3270ed59b38190c16e13c7d54ab18ce25db7eae91018252ff34bcbb15e18c7a7ba752d3526530f820d72e77e56a60984eccbcc0ede43bea0da5d34c83885146f21f6eb30ed9e9f0c365b8ec3c222ea814f2c356123d58f36afd78caddaf01252a3e741ba9b085dcc541715b859a04f758ac784e94a4ea447fe42f4b7e268088c2c0b2e06c16659be6919152b330c193595f97a094ccb2e66331137601c9764593397ad7b6995c5ffb4a3fdeff4619450b0c742cd8061b89ab993e466efb70f3e8108938828bea4d3b71bbf206c5d385e9808ca87a31554fcff770338dac05c7548fc3e2312e099285b06449cf1abe024b05ea7f5836e1f7e3b84d16bdff9d80c3e179379605efe2a9434ac6ccecbd72c78027bab935dd844fa0587d9b32767a")


# PK
ρ, t1 = D._unpack_pk(pk)
A_hat = D._expand_matrix_from_seed(ρ, _xof=shake128)
tr = D._h(pk, 32, _xof=shake256)

# Compact PK for Solidity
A_hat_compact = A_hat.compact_256(32)
t1_compact = t1.compact_256(32)


def solidity_compact_elt(h, name):
    out = "uint256[] memory {} = new uint256[](32);".format(name)
    for (i, coeff) in enumerate(h):
        out += '{}[{}] = uint256(0x00{:x});'.format(name, i, coeff)
    return out+"\n"


def solidity_compact_vec(h, name):
    n = len(h)
    out = 'uint256[][] memory {} = new uint256[][]({});\n'.format(name, n)
    out += "for (uint256 i = 0 ; i < 4 ; i ++) {\n"
    out += "\t{}[i] = new uint256[](32);\n".format(name)
    out += "}\n"

    for (i, a) in enumerate(h):
        for (j, b) in enumerate(a[0]):  # len(a) = 1...
            out += "{}[{}][{}] = uint256(0x00{:x});".format(name, i, j, b)
    return out+"\n"


def solidity_compact_mat(h, name):
    n, m = len(h), len(h[0])
    out = 'uint256[][][] memory {} = new uint256[][][]({});\n'.format(name, n)
    out += "for (uint256 i = 0 ; i < {} ; i++) {{\n".format(n)
    out += "\t{}[i] = new uint256[][]({});\n".format(name, m)
    out += "\tfor (uint256 j = 0 ; j < {}; j++) {{\n".format(m)
    out += "\t\t{}[i][j] = new uint256[](32);\n".format(name)
    out += "\t}\n"
    out += "}\n"
    for (i, a) in enumerate(h):
        for (j, b) in enumerate(a):
            for (k, c) in enumerate(b):
                out += "{}[{}][{}][{}] = uint256(0x00{:x});".format(
                    name, i, j, k, c)
    return out+"\n"


XOF = shake256
file = open(
    "../test/ZKNOX_dilithium.t.sol", 'w')
file.write("""
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
//  Code obtained from `generate_test_vectors.py` python file

import {Test, console} from "forge-std/Test.sol";
import {ZKNOX_Expand, ZKNOX_Expand_Vec, ZKNOX_Expand_Mat, ZKNOX_Compact} from "../src/ZKNOX_dilithium_utils.sol";
import {ZKNOX_dilithium} from "../src/ZKNOX_dilithium.sol";
import "../src/ZKNOX_dilithium_utils.sol";
import "../src/ZKNOX_dilithium_deploy.sol";

contract DilithiumTest is Test {
    ZKNOX_dilithium dilithium;

    // forgefmt: disable-next-line
    uint256[512] psi_rev = [uint256(1), 4808194, 3765607, 3761513, 5178923, 5496691, 5234739, 5178987, 7778734, 3542485, 2682288, 2129892, 3764867, 7375178, 557458, 7159240, 5010068, 4317364, 2663378, 6705802, 4855975, 7946292, 676590, 7044481, 5152541, 1714295, 2453983, 1460718, 7737789, 4795319, 2815639, 2283733, 3602218, 3182878, 2740543, 4793971, 5269599, 2101410, 3704823, 1159875, 394148, 928749, 1095468, 4874037, 2071829, 4361428, 3241972, 2156050, 3415069, 1759347, 7562881, 4805951, 3756790, 6444618, 6663429, 4430364, 5483103, 3192354, 556856, 3870317, 2917338, 1853806, 3345963, 1858416, 3073009, 1277625, 5744944, 3852015, 4183372, 5157610, 5258977, 8106357, 2508980, 2028118, 1937570, 4564692, 2811291, 5396636, 7270901, 4158088, 1528066, 482649, 1148858, 5418153, 7814814, 169688, 2462444, 5046034, 4213992, 4892034, 1987814, 5183169, 1736313, 235407, 5130263, 3258457, 5801164, 1787943, 5989328, 6125690, 3482206, 4197502, 7080401, 6018354, 7062739, 2461387, 3035980, 621164, 3901472, 7153756, 2925816, 3374250, 1356448, 5604662, 2683270, 5601629, 4912752, 2312838, 7727142, 7921254, 348812, 8052569, 1011223, 6026202, 4561790, 6458164, 6143691, 1744507, 1753, 6444997, 5720892, 6924527, 2660408, 6600190, 8321269, 2772600, 1182243, 87208, 636927, 4415111, 4423672, 6084020, 5095502, 4663471, 8352605, 822541, 1009365, 5926272, 6400920, 1596822, 4423473, 4620952, 6695264, 4969849, 2678278, 4611469, 4829411, 635956, 8129971, 5925040, 4234153, 6607829, 2192938, 6653329, 2387513, 4768667, 8111961, 5199961, 3747250, 2296099, 1239911, 4541938, 3195676, 2642980, 1254190, 8368000, 2998219, 141835, 8291116, 2513018, 7025525, 613238, 7070156, 6161950, 7921677, 6458423, 4040196, 4908348, 2039144, 6500539, 7561656, 6201452, 6757063, 2105286, 6006015, 6346610, 586241, 7200804, 527981, 5637006, 6903432, 1994046, 2491325, 6987258, 507927, 7192532, 7655613, 6545891, 5346675, 8041997, 2647994, 3009748, 5767564, 4148469, 749577, 4357667, 3980599, 2569011, 6764887, 1723229, 1665318, 2028038, 1163598, 5011144, 3994671, 8368538, 7009900, 3020393, 3363542, 214880, 545376, 7609976, 3105558, 7277073, 508145, 7826699, 860144, 3430436, 140244, 6866265, 6195333, 3123762, 2358373, 6187330, 5365997, 6663603, 2926054, 7987710, 8077412, 3531229, 4405932, 4606686, 1900052, 7598542, 1054478, 7648983];

    // forgefmt: disable-next-line
    uint256[512] psi_inv_rev = [uint256(1), 3572223, 4618904, 4614810, 3201430, 3145678, 2883726, 3201494, 1221177, 7822959, 1005239, 4615550, 6250525, 5698129, 4837932, 601683, 6096684, 5564778, 3585098, 642628, 6919699, 5926434, 6666122, 3227876, 1335936, 7703827, 434125, 3524442, 1674615, 5717039, 4063053, 3370349, 6522001, 5034454, 6526611, 5463079, 4510100, 7823561, 5188063, 2897314, 3950053, 1716988, 1935799, 4623627, 3574466, 817536, 6621070, 4965348, 6224367, 5138445, 4018989, 6308588, 3506380, 7284949, 7451668, 7986269, 7220542, 4675594, 6279007, 3110818, 3586446, 5639874, 5197539, 4778199, 6635910, 2236726, 1922253, 3818627, 2354215, 7369194, 327848, 8031605, 459163, 653275, 6067579, 3467665, 2778788, 5697147, 2775755, 7023969, 5006167, 5454601, 1226661, 4478945, 7759253, 5344437, 5919030, 1317678, 2362063, 1300016, 4182915, 4898211, 2254727, 2391089, 6592474, 2579253, 5121960, 3250154, 8145010, 6644104, 3197248, 6392603, 3488383, 4166425, 3334383, 5917973, 8210729, 565603, 2962264, 7231559, 7897768, 6852351, 4222329, 1109516, 2983781, 5569126, 3815725, 6442847, 6352299, 5871437, 274060, 3121440, 3222807, 4197045, 4528402, 2635473, 7102792, 5307408, 731434, 7325939, 781875, 6480365, 3773731, 3974485, 4849188, 303005, 392707, 5454363, 1716814, 3014420, 2193087, 6022044, 5256655, 2185084, 1514152, 8240173, 4949981, 7520273, 553718, 7872272, 1103344, 5274859, 770441, 7835041, 8165537, 5016875, 5360024, 1370517, 11879, 4385746, 3369273, 7216819, 6352379, 6715099, 6657188, 1615530, 5811406, 4399818, 4022750, 7630840, 4231948, 2612853, 5370669, 5732423, 338420, 3033742, 1834526, 724804, 1187885, 7872490, 1393159, 5889092, 6386371, 1476985, 2743411, 7852436, 1179613, 7794176, 2033807, 2374402, 6275131, 1623354, 2178965, 818761, 1879878, 6341273, 3472069, 4340221, 1921994, 458740, 2218467, 1310261, 7767179, 1354892, 5867399, 89301, 8238582, 5382198, 12417, 7126227, 5737437, 5184741, 3838479, 7140506, 6084318, 4633167, 3180456, 268456, 3611750, 5992904, 1727088, 6187479, 1772588, 4146264, 2455377, 250446, 7744461, 3551006, 3768948, 5702139, 3410568, 1685153, 3759465, 3956944, 6783595, 1979497, 2454145, 7371052, 7557876, 27812, 3716946, 3284915, 2296397, 3956745, 3965306, 7743490, 8293209, 7198174, 5607817, 59148, 1780227, 5720009, 1455890, 2659525, 1935420, 8378664];

    //stateful initialisation
    function setUp() public {
        bytes memory bytecode_psirev = abi.encodePacked(psi_rev);

        address a_psirev; //address of the precomputations bytecode contract
        a_psirev = address(uint160(0xcaca)); //here it is etched, use create in the future
        vm.etch(a_psirev, bytecode_psirev); //pushing psirev bytecode into contract todo : replace with create

        bytes memory bytecode_psiInvrev = abi.encodePacked(psi_inv_rev);

        address a_psiInvrev; //address of the precomputations bytecode contract
        a_psiInvrev = address(uint160(0xa5a5)); //here it is etched, use create in the future
        vm.etch(a_psiInvrev, bytecode_psiInvrev); //pushing psirev bytecode into contract todo : replace with create

        dilithium = new ZKNOX_dilithium();
        dilithium.update(a_psirev, a_psiInvrev);

    }

    function testVerify() public {
""")

file.write("// Public key\n")
file.write(solidity_compact_mat(A_hat_compact, 'A_hat'))
file.write("bytes memory tr = hex\"{}\";\n".format(tr.hex()))
file.write(solidity_compact_vec(t1_compact, 't1'))

# SIG
sig = D.sign(sk, msg, _xof=XOF)
assert D.verify(pk, msg, sig, _xof=XOF)
c_tilde, z, h = D._unpack_sig(sig)
# z with only positive coefficients
for i in range(4):
    assert len(z._data[i]) == 1
    for j in range(256):
        if z._data[i][0].coeffs[j] < 0:
            z._data[i][0].coeffs[j] += 8380417
# Compact SIG for Solidity
z_compact = z.compact_256(32)
h_compact = h.compact_256(32)

file.write("\n// Signature\n")
file.write("bytes memory c_tilde = hex\"{}\";\n".format(c_tilde.hex()))
file.write(solidity_compact_vec(z_compact, 'z'))
file.write(solidity_compact_vec(h_compact, 'h'))
file.write("""
        // CREATE PK OBJECT
        PubKey memory pk;
        pk.a_hat = A_hat;
        pk.tr = tr;
        pk.t1 = t1;

        // CREATE SIG OBJECT
        Signature memory sig;
        sig.c_tilde = c_tilde;
        sig.z = z;
        sig.h = h;

        // MESSAGE
        bytes memory msgs = "We are ZKNox.";
        uint256 gasStart = gasleft();
        bool ver = dilithium.verify(pk, msgs, sig);
        uint256 gasUsed = gasStart - gasleft();
        console.log("Gas used:", gasUsed);
        assertTrue(ver);
    }
}
""")
file.close()
