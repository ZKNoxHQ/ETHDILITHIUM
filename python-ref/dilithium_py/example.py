from .dilithium import Dilithium2
from .keccak_prng.keccak_prng_wrapper import Keccak256PRNG

# # this is the first test vector from the KAT files of ML-DSA.
# seed = bytes.fromhex(
#     "061550234D158C5EC95595FE04EF7A25767F2E24CC2BC479D09D86DC9ABCFDE7056A8C266F9EF97ED08541DBD2E1FFA1")
# msg = bytes.fromhex(
#     "D81C4D8D734FCBFBEADE3D3F8A039FAA2A2C9957E835AD55B22E75BF57BB556AC8")
# Dilithium2.set_drbg_seed(seed)
# pk, sk = Dilithium2.keygen()
# sig = Dilithium2.sign(sk, msg)
# assert Dilithium2.verify(pk, msg, sig)
# sm = bytes.fromhex("66AF1F4837B08A2D04BE10BF5D5337D9BCC8973840CBB5F63CFAFA528DB58821BF24C1038C54FF2ACACFA9997F33EB234155EB3506E52907ACA0AF8EAA946D4C5AA162CFA72197691F4A71C71556003707E3CAC85C3F162CC60795AB42FF6F4A0ABF2A6CEE57DB3302985CF6A3E701C687A9984B4BEDBC6508AE8E2FEB0B7A8A1731373C3C5246F8C3D940CB5737C3EF170A73F63B06A765B5F7FE45E4DC5FA65E4398473540D54274B5B97934E2FBBD77A00316E27619B5EA2A18AD4542D75FBB57D906CC0694D39E8590AAB94DC6513B635CE51EF186D5A69F20EDC76479F437BA1F676D49529FF19909D9750FFB0568BD137299747816D4F07A9BDA579B56F9054CBE583266141C33B3153F25B12FDCADEAD75090903D0C029D4E4B4763C42AC3819F55A79E3E288DA0803835424ACFFB1BB55FA7DA0855B455D0447BCE46B444E72A056F4E889860C936BCBE1BF2978ED2833B71ED722E1D15095B1317A9FCDD17865DCF84C4747C3C4B33B94DA8AC6AB479BFEDDBD2CB404B13CE580F0C55C6B8782DE192CABCFE1E211D04D5F38AE9516BE5910FD725D30DC145B8C0BAA091C4A11FE44D62EB72851FE9986F58DBF466D4B2F36509A8189A946A6EBA4D0634A777425721BD736F777ADBB8CD02DB21B9C6DF9C69F9575FBBDF0A67D765F2F2371CD8538A107C2D8DE9726F034BE0417A5C054493C9E671717AD6ADE55EE17E4E6D2C1693D1F019B4F4212DDDC9133A4038C3367D026E8E000C1A465A0E737EF504937BFA645F63AA81B3945C9BA91B2CBB6E96A7FEE850DE61E314F772592B52CF493D51202311EEB49171739D807CE3AB405EC845A63FFB6A3BB46A5711432B2F367124BBECFA64404FE065EBE60864C0148F7850152E80C760D01BBC57E7DBEF9DE65927C24BE17FAED82BEC1B6973D557B8267CA41A850616A6998B0750357DC330EC40447C5170EE751BA8C2101E4F29BF21DB14DCF661526479A947C60C28C7874F76B9E99699CF9DF71A5005622630601B7781CD0E7557A2D6BD0B771A423391C4480B0E8E8AC0CE4F68DB7CC5EEA3524923498685D7C9C45AC9D7B0C3827641C9F257CA6D3ACAF04C59FDE7D3B15D24989D76355E319C433B82E78883DADFA4A5A95FD861D1B6114C583F4915B948C72BA66FFC2AB4713AA05544B23AE7C83C75AB5549994A077086C71A2D7FA3088C8C8C0E0A27F85277A620BCF7A9360AF6964EACD6C44A96C63581E9D576158C406C714ECF7285849CA3265E0857EEF43DBB95546D0CBDE2881725D5E0BEBD45CBAAF80173D2AA96240FE337AC86578538C37510C79FCBF1043D263F167177D723E9D5ABDF56FDBB51B4F578749C3A77E4AB60CA032015968B9BF0D469D73BA4BD66929FDAAC294B910DB9D58D49DDD2D1E7EF9C4EB81361EAE786D839CF2E95E4F9614192A249253C919CE2391022DB95A598BA6BF01A2C7CD0F1609E7FFDE0F87D12FACCD822E0EEF8DE1E0EA0AC1230363EEC1633081AF9905E87C3E56A214A601418FD5C3910D6AD9CC121ED0EDE6FCA0909DDD0CC26D528004A707923D3AC6FEF0110A09D3E329B6F93BC3CDD7D6CD7D62B811D8FAC3848A8969B778FA77DC416B18A7878040CFD4B1D8DB530C7E7F5C859CC56570CD3CA8B4D18358AD737D6B902B24493C33FF9ED6EB2DDC06C928E3E7B790ACAD77BC1FE9EED09D7948C4A5D338408B361B10EAEE9DBCF50BA8867A5F108019F58A0813E6ADE68DED0638493631EE40C8049C34150D91ED3734731777502238E55F01CD88CAAAA25E8ABDDBDBB4BC6554D5A373D610BBCDB05AF600D9C1D9EF1B3D43720F043C106EE93A102EE7F5333C6FD0040ADD9E9D7FAF952FFF2A718D01E45028F228355EAC6A92E626B63521C4990F7FAB6CD2E8FCB74F359CA299AF447FADD9FA5006088A4F041CCCDAC2579DF3B8983257F711245E85539F9D14C4B99D0627FB41543C75B6F76B87F1DC1B6A141DE13BE4CFE133074CBA338063CF76F8647ED5E5482456E6CB3FCEDB9CFE7A762B16182C5408C8F5F13C29CF88772F13FEB8F9E0E051307AF2EA46F37A069275465AD5576887D06CBDF5AC9B9BDBD6895839BEE685DE8B24890B848409A21B38BBDD29C441782BF3A603306153C47345E5F58E8B3B236266A3F215269AA90A59CA2D5EFAB60FD662EBEA0130BB0F6FB1CABC604EB70515BCEABFB4F17ABF40964E527F85EAAA632775DEE85A31CB18D63C8D550596C72FE94E8CD55DF95C2FD10C4CFCF8811A3204C8F5C57204BCCFB457FCDD0F7569C147B416ECE6CFA813DE0F8B7B48F885162FC067EE6E609158607E1843BD5559C3383CD920F833995C5A85F98B6F6BD152B83FD112353C5A97CB6FCA54EA56CE75ABE92DF29531A6118CD31D7E58F3F1B298EAE463035B098D288E314A5A315308DA372BDE335E9E363486B2CE7195F25588FBC3A6C358DFF1BAB71CFC9F82A68DE8AFCF95931BCD8E4C2115BD8D237EB56A3D57BB4C51641C4B5198BB9B65AADBE16063BDB3A67B13B32B6CC13E914E2281724F76A35422E3448E8C3D244C681DC72FC65CF38ED647E40BCA73D01A8F23274CC0619EE9A6CE49DFD8DD639A246B72564AAFC0177AE46BCC3D0829F3F24816BFE809AF5C1286A089369F59606F95F0F27E8800F9DC8EFFEB055731CF75F01533B2508B88A4B628936F021CA20276DC46C677CC22EEE6AE22245A2616DB14E0D84CE4F58B0E81C51AC330FF5925B5E5EA75D753A34D6DA010DDB5874787FCC02C9AE4EEA39FE47268B04AF9B57C50C7DD03008A4C9BFF3973E51A5CD1CFD970C6DA8438D1D9BA3CD197A0029FF94D02157391CA4DA1EBD3AC11AD701C71CEFF7B0DC245C2D9ECA1C27C55816CA5740D688F92E4F64147C32D6EB6FF2A54B1D1995A31C8C81A0CB709FB760B184392A48991D3F80D69A272A7AA8F829C12244F4A5418EF36D40FBC6BEA4E33A1AAAA6D2361E03D2487AAFFE6BBE42B56BEFE78C35F2A8367AD83A67EE99316C496F94CF17D3D35B0FB371868C19C991B721F59DE6641880A59045E2FFB182E0F51C9E536D7C72CEC698975A0D06187C0EF38B716AAA71BA701678A3CF51D8AA33C944C767ED07249B894699A650F57B7CA56B6D77CE4C79496ACBE340F7792CA4116F7CCE12BCC0AEC3642DE421AA91860BA042D4DAE4DCCFBDC3CD2C72ABEE2B005307565FF4B33CEC2F112DC83B509AE88D31A421ABA7830F1A1E2B3DF212A550890D469827ACFDC6020C91234D2D18A6B266262E689689E268D4617B59B11F3842506FC5EAF53DC80172F0911B284855A1A3A4AAAEB0B1E2E6FC1F3045484B5960728C93B2C5DCE8FF0E1E3138415890AEB8CC122529737A898FA5A9ACDAEBEEF1F200000000000000000000000000000000000000000000000000000E1D2736D81C4D8D734FCBFBEADE3D3F8A039FAA2A2C9957E835AD55B22E75BF57BB556AC8")
# assert sig + msg == sm
# print("Signature from Python:")
# for i in range(len(sig.hex())//2):
#     print("0x{}, ".format(sig.hex()[2*i: 2*i+2]), end='')

# # EXAMPLE WITH ETHDILITHIUM
# seed = bytes.fromhex(
#     "061550234D158C5EC95595FE04EF7A25767F2E24CC2BC479D09D86DC9ABCFDE7056A8C266F9EF97ED08541DBD2E1FFA1")
# msg = bytes.fromhex(
#     "D81C4D8D734FCBFBEADE3D3F8A039FAA2A2C9957E835AD55B22E75BF57BB556AC8")
# Dilithium2.set_drbg_seed(seed)
# pk, sk = Dilithium2.keygen(_xof=Keccak256PRNG, _xof2=Keccak256PRNG)

# sig = Dilithium2.sign(sk, msg, _xof=Keccak256PRNG, _xof2=Keccak256PRNG)
# assert Dilithium2.verify(pk, msg, sig, _xof=Keccak256PRNG, _xof2=Keccak256PRNG)


# # test poly uniforom eta
# seed = bytes.fromhex(
#     "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001")
# # counter = 0
# # p = Dilithium2.R.rejection_bounded_poly(
# #     seed,  counter, Dilithium2.eta, _xof=Keccak256PRNG)
# # print("coefficients:", p.coeffs)
# counter = 0
# p = Dilithium2.R.rejection_bounded_poly(
#     seed,  counter, Dilithium2.eta, _xof=Keccak256PRNG)
# # print("coefficients:", p.coeffs)

# # test poly uniform
# rho = bytes.fromhex(
#     "7a32415741a9357cdb07a5853f80d18a7a2aaabcde441b44a03a0e3f844d4a19")
# p = Dilithium2.R.rejection_sample_ntt_poly(rho, 0, 0, _xof=Keccak256PRNG)
# # print(p.coeffs)

# # test poly uniform
# rho = bytes.fromhex(
#     "7a32415741a9357cdb07a5853f80d18a7a2aaabcde441b44a03a0e3f844d4a19")
# p = Dilithium2.R.rejection_sample_ntt_poly(rho, 0, 0, _xof=Keccak256PRNG)
# # print(p.coeffs)


# # EXAMPLE WITH ETHDILITHIUM WITH KAT 15
# print("EXAMPLE KAT15 ETHDILITHIUM")
# seed = bytes.fromhex(
#     "9887F1FD854241A301EE0120645CD8E119B43F7BEE11F77A835E9ADF518C3A51CB76D86653FBE73AA716264C146797EE")
# msg = bytes.fromhex(
#     "AAAC")
# Dilithium2.set_drbg_seed(seed)
# print(Dilithium2.random_bytes(32).hex())
# pk, sk = Dilithium2.keygen(_xof=Keccak256PRNG, _xof2=Keccak256PRNG)
# sig = Dilithium2.sign(sk, msg, _xof=Keccak256PRNG,
#                       _xof2=Keccak256PRNG, deterministic=True)
# print("SIG = {}".format(sig.hex()))
# assert Dilithium2.verify(pk, msg, sig, _xof=Keccak256PRNG, _xof2=Keccak256PRNG)

# # EXAMPLE WITH DILITHIUM WITH KAT 15
# print("EXAMPLE KAT15 DILITHIUM")
# seed = bytes.fromhex(
#     "9887F1FD854241A301EE0120645CD8E119B43F7BEE11F77A835E9ADF518C3A51CB76D86653FBE73AA716264C146797EE")
# msg = bytes.fromhex(
#     "AAAF")
# Dilithium2.set_drbg_seed(seed)
# pk, sk = Dilithium2.keygen()

# sig = Dilithium2.sign(sk, msg, deterministic=True)
# print("SIG = {}".format(sig.hex()))
# assert Dilithium2.verify(pk, msg, sig)
