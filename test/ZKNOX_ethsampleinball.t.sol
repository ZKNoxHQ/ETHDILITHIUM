// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;
//  Code obtained from `generate_test_vectors.py` python file

import {Test, console} from "forge-std/Test.sol";
import {ZKNOX_Expand, ZKNOX_Expand_Vec, ZKNOX_Expand_Mat, ZKNOX_Compact} from "../src/ZKNOX_dilithium_utils.sol";
import {ZKNOX_ethdilithium} from "../src/ZKNOX_ethdilithium.sol";
import "../src/ZKNOX_dilithium_utils.sol";
import "../src/ZKNOX_dilithium_deploy.sol";

contract ETHSampleInBallTest is Test {
    ZKNOX_ethdilithium dilithium;

    // forgefmt: disable-next-line
    uint256[512] psi_rev = [uint256(1), 4808194, 3765607, 3761513, 5178923, 5496691, 5234739, 5178987, 7778734, 3542485, 2682288, 2129892, 3764867, 7375178, 557458, 7159240, 5010068, 4317364, 2663378, 6705802, 4855975, 7946292, 676590, 7044481, 5152541, 1714295, 2453983, 1460718, 7737789, 4795319, 2815639, 2283733, 3602218, 3182878, 2740543, 4793971, 5269599, 2101410, 3704823, 1159875, 394148, 928749, 1095468, 4874037, 2071829, 4361428, 3241972, 2156050, 3415069, 1759347, 7562881, 4805951, 3756790, 6444618, 6663429, 4430364, 5483103, 3192354, 556856, 3870317, 2917338, 1853806, 3345963, 1858416, 3073009, 1277625, 5744944, 3852015, 4183372, 5157610, 5258977, 8106357, 2508980, 2028118, 1937570, 4564692, 2811291, 5396636, 7270901, 4158088, 1528066, 482649, 1148858, 5418153, 7814814, 169688, 2462444, 5046034, 4213992, 4892034, 1987814, 5183169, 1736313, 235407, 5130263, 3258457, 5801164, 1787943, 5989328, 6125690, 3482206, 4197502, 7080401, 6018354, 7062739, 2461387, 3035980, 621164, 3901472, 7153756, 2925816, 3374250, 1356448, 5604662, 2683270, 5601629, 4912752, 2312838, 7727142, 7921254, 348812, 8052569, 1011223, 6026202, 4561790, 6458164, 6143691, 1744507, 1753, 6444997, 5720892, 6924527, 2660408, 6600190, 8321269, 2772600, 1182243, 87208, 636927, 4415111, 4423672, 6084020, 5095502, 4663471, 8352605, 822541, 1009365, 5926272, 6400920, 1596822, 4423473, 4620952, 6695264, 4969849, 2678278, 4611469, 4829411, 635956, 8129971, 5925040, 4234153, 6607829, 2192938, 6653329, 2387513, 4768667, 8111961, 5199961, 3747250, 2296099, 1239911, 4541938, 3195676, 2642980, 1254190, 8368000, 2998219, 141835, 8291116, 2513018, 7025525, 613238, 7070156, 6161950, 7921677, 6458423, 4040196, 4908348, 2039144, 6500539, 7561656, 6201452, 6757063, 2105286, 6006015, 6346610, 586241, 7200804, 527981, 5637006, 6903432, 1994046, 2491325, 6987258, 507927, 7192532, 7655613, 6545891, 5346675, 8041997, 2647994, 3009748, 5767564, 4148469, 749577, 4357667, 3980599, 2569011, 6764887, 1723229, 1665318, 2028038, 1163598, 5011144, 3994671, 8368538, 7009900, 3020393, 3363542, 214880, 545376, 7609976, 3105558, 7277073, 508145, 7826699, 860144, 3430436, 140244, 6866265, 6195333, 3123762, 2358373, 6187330, 5365997, 6663603, 2926054, 7987710, 8077412, 3531229, 4405932, 4606686, 1900052, 7598542, 1054478, 7648983];

    // forgefmt: disable-next-line
    uint256[512] psi_inv_rev = [uint256(1), 3572223, 4618904, 4614810, 3201430, 3145678, 2883726, 3201494, 1221177, 7822959, 1005239, 4615550, 6250525, 5698129, 4837932, 601683, 6096684, 5564778, 3585098, 642628, 6919699, 5926434, 6666122, 3227876, 1335936, 7703827, 434125, 3524442, 1674615, 5717039, 4063053, 3370349, 6522001, 5034454, 6526611, 5463079, 4510100, 7823561, 5188063, 2897314, 3950053, 1716988, 1935799, 4623627, 3574466, 817536, 6621070, 4965348, 6224367, 5138445, 4018989, 6308588, 3506380, 7284949, 7451668, 7986269, 7220542, 4675594, 6279007, 3110818, 3586446, 5639874, 5197539, 4778199, 6635910, 2236726, 1922253, 3818627, 2354215, 7369194, 327848, 8031605, 459163, 653275, 6067579, 3467665, 2778788, 5697147, 2775755, 7023969, 5006167, 5454601, 1226661, 4478945, 7759253, 5344437, 5919030, 1317678, 2362063, 1300016, 4182915, 4898211, 2254727, 2391089, 6592474, 2579253, 5121960, 3250154, 8145010, 6644104, 3197248, 6392603, 3488383, 4166425, 3334383, 5917973, 8210729, 565603, 2962264, 7231559, 7897768, 6852351, 4222329, 1109516, 2983781, 5569126, 3815725, 6442847, 6352299, 5871437, 274060, 3121440, 3222807, 4197045, 4528402, 2635473, 7102792, 5307408, 731434, 7325939, 781875, 6480365, 3773731, 3974485, 4849188, 303005, 392707, 5454363, 1716814, 3014420, 2193087, 6022044, 5256655, 2185084, 1514152, 8240173, 4949981, 7520273, 553718, 7872272, 1103344, 5274859, 770441, 7835041, 8165537, 5016875, 5360024, 1370517, 11879, 4385746, 3369273, 7216819, 6352379, 6715099, 6657188, 1615530, 5811406, 4399818, 4022750, 7630840, 4231948, 2612853, 5370669, 5732423, 338420, 3033742, 1834526, 724804, 1187885, 7872490, 1393159, 5889092, 6386371, 1476985, 2743411, 7852436, 1179613, 7794176, 2033807, 2374402, 6275131, 1623354, 2178965, 818761, 1879878, 6341273, 3472069, 4340221, 1921994, 458740, 2218467, 1310261, 7767179, 1354892, 5867399, 89301, 8238582, 5382198, 12417, 7126227, 5737437, 5184741, 3838479, 7140506, 6084318, 4633167, 3180456, 268456, 3611750, 5992904, 1727088, 6187479, 1772588, 4146264, 2455377, 250446, 7744461, 3551006, 3768948, 5702139, 3410568, 1685153, 3759465, 3956944, 6783595, 1979497, 2454145, 7371052, 7557876, 27812, 3716946, 3284915, 2296397, 3956745, 3965306, 7743490, 8293209, 7198174, 5607817, 59148, 1780227, 5720009, 1455890, 2659525, 1935420, 8378664];

    //stateful initialisation
    function setUp() public {
        bytes memory bytecode_psirev = abi.encodePacked(psi_rev);

        address a_psirev; //address of the precomputations bytecode contract
        a_psirev = address(uint160(0xcaca)); //here it is etched, use create in the future
        vm.etch(a_psirev, bytecode_psirev); //pushing psirev bytecode into contract todo : replace with create

        bytes memory bytecode_psiInvrev = abi.encodePacked(psi_inv_rev);

        address a_psiInvrev; //address of the precomputations bytecode contract
        a_psiInvrev = address(uint160(0xa5a5)); //here it is etched, use create in the future
        vm.etch(a_psiInvrev, bytecode_psiInvrev); //pushing psirev bytecode into contract todo : replace with create

        dilithium = new ZKNOX_ethdilithium();
        dilithium.update(a_psirev, a_psiInvrev);
    }

    function testVerify() public {
        bytes memory c_tilde = hex"cc501e9f471a004d2d3f60894d12aad3114e8abf62e413a800b7e7987ec5100b";
        // forgefmt: disable-next-line
        uint256[256] memory expected_c = [uint256(0),0,0,0,0,0,1,0,0,8380416,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,8380416,0,0,0,0,0,0,8380416,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8380416,0,8380416,0,8380416,8380416,0,0,0,0,8380416,8380416,8380416,0,0,0,0,0,0,8380416,0,0,0,0,1,0,8380416,8380416,0,0,0,0,0,0,0,8380416,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8380416,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,8380416,0,0,0,8380416,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,8380416,8380416,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8380416,0,0,8380416,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0];
        // forgefmt: disable-next-line
        uint256[256] memory expected_c_ntt = [uint256(2433239),5742823,2158789,2070120,404194,4430001,2742945,5696018,5897339,1742045,128893,5483873,4658280,7222093,3646239,2250103,1249702,2133199,8268988,6748079,4347044,5211967,2912391,3380244,7515923,1112173,958704,5887348,1171763,1507441,4335748,1995326,2608351,3799245,6575540,1037234,7431277,4384344,2638449,1915689,4889025,4677662,622746,7324468,865561,3758105,6888828,8011610,3012430,3475102,1595103,8234322,253936,7577691,2337117,2625320,3314161,737499,4455350,3794454,3058041,286306,1344046,5679630,7658046,2503627,3073818,1842684,5376064,1985957,5799585,6857071,2355112,8032259,7252416,6194585,4050618,3178182,815030,2228009,7148203,2565226,7082147,2836585,4087611,47253,2446202,7633165,2905104,3059441,2424380,3490203,5311831,2837384,6479496,4434733,4120310,5465037,1370094,509230,7536409,4740889,1165176,1014983,249908,5025219,7543031,1469685,8136948,2867139,7787654,5145249,3274672,3508451,346166,5871281,1192181,8352242,5044211,2144340,7482556,1993279,7615967,2475403,3226673,4529463,7875514,5101957,6544496,4004093,5577416,5297897,3070973,8093622,8099157,6614924,4741382,1828250,7930004,5350999,3369554,2832924,5440823,7737308,5417571,6997392,1472196,8161152,8358261,8043225,974728,1860009,2337498,4670682,6230499,2136255,6645572,1161912,1287619,6842838,3464890,7251184,1091931,3789099,2411174,7210893,7018484,6334626,1996732,6757248,4378591,35041,7937954,1923872,7101081,7308210,7624348,1744560,1048159,2296656,1154423,3752211,6175696,6585320,3844129,3957110,4787878,8353481,5453391,997695,2756520,6021194,5404349,2381445,7280012,461418,2340021,3020204,1526401,3516599,5681912,7416515,5657808,517900,2836015,7191461,3782131,5513814,1366392,963188,3975002,6418550,2820351,4018302,1651258,2299363,5677669,3444819,985793,7112515,5849567,1318867,189489,2825952,4397122,7254223,30759,2194126,462029,8380357,4288286,3944653,6451115,612401,4481641,1739847,5915539,6137370,5840180,5177056,6063274,6633352,5894654,3213205,5196943,133200,6704214,4188383,4021643,6310892,589496,6793370,2061397,7531526,7195655,4509937];
        uint256[] memory c = dilithium.compute_c(c_tilde);
        for (uint256 i = 0; i < 256; i++) {
            assertEq(c[i], expected_c[i]);
        }
    }
}
